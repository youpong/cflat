options {
  DEBUG_PARSER = true;
  UNICODE_INPUT = true;
  JDK_VERSION="11";
}

PARSER_BEGIN(Parser)
package cflat.parser;

import cflat.ast.AddressNode;
import cflat.ast.AST;
import cflat.ast.ArefNode;
import cflat.ast.AssignNode;
import cflat.ast.BinaryOpNode;
import cflat.ast.BlockNode;
import cflat.ast.CastNode;
import cflat.ast.CondExprNode;
import cflat.ast.Declarations;
import cflat.ast.DereferenceNode;
import cflat.ast.DoWhileNode;
import cflat.ast.ExprNode;
import cflat.ast.ExprStmtNode;
import cflat.ast.ForNode;
import cflat.ast.FuncallNode;
import cflat.ast.IfNode;
import cflat.ast.IntegerLiteralNode;
import cflat.ast.LabelNode;
import cflat.ast.Location;
import cflat.ast.LogicalAndNode;
import cflat.ast.LogicalOrNode;
import cflat.ast.MemberNode;
import cflat.ast.OpAssignNode;
import cflat.ast.PrefixOpNode;
import cflat.ast.PtrMemberNode;
import cflat.ast.ReturnNode;
import cflat.ast.SizeofExprNode;
import cflat.ast.SizeofTypeNode;
import cflat.ast.Slot;
import cflat.ast.StmtNode;
import cflat.ast.StringLiteralNode;
import cflat.ast.StructNode;
import cflat.ast.SuffixOpNode;
import cflat.ast.TypedefNode;
import cflat.ast.TypeNode;
import cflat.ast.UnaryOpNode;
import cflat.ast.UnionNode;
import cflat.ast.VariableNode;
import cflat.ast.WhileNode;
import cflat.entity.Constant;
import cflat.entity.DefinedFunction;
import cflat.entity.DefinedVariable;
import cflat.entity.Parameter;
import cflat.entity.Params;
import cflat.entity.UndefinedFunction;
import cflat.entity.UndefinedVariable;
import cflat.exception.CompileException;
import cflat.exception.FileException;
import cflat.exception.SyntaxException;
import cflat.type.ArrayTypeRef;
import cflat.type.FunctionTypeRef;
import cflat.type.IntegerTypeRef;
import cflat.type.ParamTypeRefs;
import cflat.type.PointerTypeRef;
import cflat.type.StructTypeRef;
import cflat.type.TypeRef;
import cflat.type.UnionTypeRef;
import cflat.type.UserTypeRef;
import cflat.type.VoidTypeRef;
import cflat.utils.ErrorHandler;
import java.io.*;
import java.util.*;

/**
 * parser
 */
public class Parser {

  static public AST parseFile(File file, LibraryLoader loader,
                              ErrorHandler errorHandler)
			      throws SyntaxException, FileException {
    return parseFile(file, loader, errorHandler, false);
  }

  static public AST parseFile(File file, LibraryLoader loader,
                              ErrorHandler errorHandler, boolean debug)
			      throws SyntaxException, FileException {
    return newFileParser(file, loader, errorHandler, debug).parse();
  }

  static public Declarations parseDeclFile(File file, LibraryLoader loader,
                              ErrorHandler errorHandler)
			      throws SyntaxException, FileException {
    return parseDeclFile(file, loader, errorHandler, false);
  }
  static public Declarations parseDeclFile(File file, LibraryLoader loader,
                              ErrorHandler errorHandler, boolean debug)
			      throws SyntaxException, FileException {
    return newFileParser(file, loader, errorHandler, debug).parseDecls();
  }
  static final public String SOURCE_ENCODING = "UTF-8";
  
  static public Parser newFileParser(File file, LibraryLoader loader,
                                     ErrorHandler errorHandler, boolean debug)
				     throws FileException {
    try {
      BufferedReader r =
        new BufferedReader(
	  new InputStreamReader(new FileInputStream(file), SOURCE_ENCODING));
      return new Parser(r, file.getPath(), loader, errorHandler, debug);
    }
    catch (FileNotFoundException ex) {
      throw new FileException(ex.getMessage());
    }
    catch (UnsupportedEncodingException ex) {
      throw new Error(SOURCE_ENCODING + " is not supported??: " +
                      ex.getMessage());
    }
  }  

  public Parser(Reader s, String name, LibraryLoader loader,
                ErrorHandler errorHandler) {
    this(s, name, loader, errorHandler, false);		
  }
  /** プログラムを入力しているファイル名 */
  private String sourceName;
  /** import で読み込むインポートファイルのローダー */
  private LibraryLoader loader;
  /** エラーや警告を処理するオブジェクト */
  private ErrorHandler errorHandler;
  /** typedef で定義された型の名前を記憶するテーブル */
  private Set<String> knownTypedefs;
  
  public Parser(Reader s, String name, LibraryLoader loader,
                ErrorHandler errorHandler, boolean debug) {
    this(s);
    this.sourceName = name;
    this.loader = loader;
    this.errorHandler = errorHandler;
    this.knownTypedefs = new HashSet<String>();
    if(debug) {
      enable_tracing();
    } else {
      disable_tracing();
    }
  }

  public AST parse() throws SyntaxException {
    try {
      return compilation_unit();
    }
    catch (TokenMgrException ex) {
      throw new SyntaxException(ex.getMessage());
    }  
    catch (ParseException ex) {
      throw new SyntaxException(ex.getMessage());
    }
    catch (LookaheadSuccess err) { // TODO: これは実際に来るのかな
      throw new SyntaxException("syntax error");
    }
  }  

  public Declarations parseDecls() throws SyntaxException {
    try {
      return declaration_file();
    }
    catch (TokenMgrException ex) {
      throw new SyntaxException(ex.getMessage());
    }
    catch (ParseException ex) {
      throw new SyntaxException(ex.getMessage());
    }
  }

  private void addKnownTypedefs(List<TypedefNode> typedefs) {
    for (TypedefNode n : typedefs) {
      addType(n.name());
    }
  }
  
  // TODO: test
  private void addType(String name) {
    knownTypedefs.add(name);
  }
  
  // TODO: test
  private boolean isType(String name) {
    return knownTypedefs.contains(name);
  }

  // TODO: test
  private IntegerLiteralNode integerNode(Location loc, String image) {
    long i = integerValue(image);
    if (image.endsWith("UL")) {
      return new IntegerLiteralNode(loc, IntegerTypeRef.ulongRef(), i);
    }
    else if(image.endsWith("L")) {
      return new IntegerLiteralNode(loc, IntegerTypeRef.longRef(), i);
    }
    else if(image.endsWith("U")) {
      return new IntegerLiteralNode(loc, IntegerTypeRef.uintRef(), i);
    }
    else {
      return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
    }
  }

  // TODO: test
  private long integerValue(String image) {
    String s = image.replaceFirst("[UL]+", "");
    if (s.startsWith("0x") || s.startsWith("0X")) {
      return Long.parseLong(s.substring(2), 16);
    }
    else if(s.startsWith("0") && !s.equals("0")) {
      return Long.parseLong(s.substring(1), 8);
    }
    return Long.parseLong(s, 10);
  }

  // TODO: test
  private long characterCode(String image) throws ParseException {
    String s = stringValue(image);
    if (s.length() != 1) {
      throw new Error("must not happen: character length > 1");
    }
    return (long)s.charAt(0);
  }

  // TODO: test
  private String stringValue(String _image) throws ParseException {
    int pos = 0;
    int idx;
    StringBuffer buf = new StringBuffer();
    String image = _image.substring(1, _image.length() - 1);

    while((idx = image.indexOf("\\", pos)) >= 0) {
      buf.append(image.substring(pos, idx));
      if(image.length() >= idx + 4
             && Character.isDigit(image.charAt(idx+1))
             && Character.isDigit(image.charAt(idx+2))
             && Character.isDigit(image.charAt(idx+3))){
         buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
         pos = idx + 4;
      }
      else {
         buf.append(unescapeSeq(image.charAt(idx+1)));
         pos = idx + 2;
      }
    }   
    if(pos < image.length()) {
        buf.append(image.substring(pos, image.length()));
    }
    return buf.toString();		       
  }

  // TODO: test
  private TypeRef size_t() {
    return IntegerTypeRef.ulongRef();
  }

  private static final int charMax = 255;
  // TODO: test
  private char unescapeOctal(String digits) throws ParseException {
    int i = Integer.parseInt(digits, 8);
    if (i > charMax) {
      throw new ParseException("octal character sequence too big: \\" + digits);
    }
    return (char)i;
  }

  private static final char bell = 7;
  private static final char backspace = 8;
  private static final char escape = 27;
  private static final char vt = 11;

  // TODO: test
  private char unescapeSeq(char c) throws ParseException {
    switch(c) {
    case '0': return '\0';
    case '"': return '"';
    case '\'': return '\'';
    case 'a': return bell;
    case 'b': return backspace;
    case 'e': return escape;
    case 'f': return '\f';
    case 'n': return '\n';
    case 'r': return '\r';
    case 't': return '\t';
    case 'v': return vt;
    default:
      throw new ParseException("unknown escape sequence: \"\\" + c);
    }  
  }
  
  static public void parse(Reader reader) throws ParseException {
    new Parser(reader).compilation_unit();
  }

  protected Location location(Token t) {
    return new Location(sourceName, t);
  }
}
PARSER_END(Parser)

SPECIAL_TOKEN: { <SPACES: ([" ","\t","\r","\n","\f"])+> }

SPECIAL_TOKEN: { <LINE_COMMENT: "//" (~["\n","\r"])*("\n"|"\r\n"|"\r")?> }

MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }

MORE: { <"\""> : IN_STRING }
<IN_STRING> MORE: {
    <(~["\"","\\","\n","\r"])+>
  | <"\\"(["0"-"7"]){3}>
  | <"\\"~[]>
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }

MORE: { <"'"> : IN_CHARACTER }
<IN_CHARACTER> MORE: {
    <~["'","\\","\n","\r"]> : CHARACTER_TERM
  | <"\\"(["0"-"7"]){3}>    : CHARACTER_TERM
  | <"\\"~[]>               : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT }

TOKEN: {
    <BREAK    : "break"   >
  | <CASE     : "case"    >
  | <CHAR     : "char"    >
  | <CONST    : "const"   >
  | <CONTINUE : "continue">
  | <DEFAULT_ : "default" >
  | <DO       : "do"      >
  | <ELSE     : "else"    >
  | <EXTERN   : "extern"  >
  | <FOR      : "for"     >
  | <GOTO     : "goto"    >
  | <IF       : "if"      >
  | <INT      : "int"     >
  | <IMPORT   : "import"  >
  | <LONG     : "long"    >
  | <RETURN   : "return"  >
  | <SHORT    : "short"   >
  | <SIZEOF   : "sizeof"  >
  | <STATIC   : "static"  >
  | <STRUCT   : "struct"  >
  | <SWITCH   : "switch"  >
  | <TYPEDEF  : "typedef" >
  | <UNION    : "union"   >
  | <UNSIGNED : "unsigned">
  | <VOID     : "void"    >
  | <WHILE    : "while"   >
}

TOKEN: {
    <INTEGER: ["1"-"9"](["0"-"9"])*("U")?("L")?
            | "0"["x","X"](["0"-"9","a"-"f","A"-"F"])+("U")?("L")?
	    | "0"(["0"-"7"])*("U")?("L")?
            >
}

TOKEN: {
    <IDENTIFIER: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

AST compilation_unit():
{
  Token t;
  Declarations impdecls, decls;
}
{
    {
      t = getToken(1);
    }  
  impdecls=import_stmts() decls=top_defs() <EOF>
    {
      decls.add(impdecls);
      return new AST(location(t), decls);
    }  
}

Declarations declaration_file():
{
  Declarations impdecls, decls = new Declarations();
  UndefinedFunction funcdecl;
  UndefinedVariable vardecl;
  Constant defconst;
  StructNode defstruct;
  UnionNode defunion;
  TypedefNode typedef;
}
{
  impdecls=import_stmts()
    {
      decls.add(impdecls);
    }
  ( LOOKAHEAD(<EXTERN> typedef() <IDENTIFIER> "(")
    funcdecl=funcdecl()   { decls.addFuncdecl(funcdecl); }
  | vardecl=vardecl()     { decls.addVardecl(vardecl); }
  | defconst=defconst()   { decls.addConstant(defconst); }
  | defstruct=defstruct() { decls.addDefstruct(defstruct); }
  | defunion=defunion()   { decls.addDefunion(defunion); }
  | typedef=typedef()     { decls.addTypedef(typedef); }
  )* <EOF>
    {
      return decls;
    }  
}

Declarations import_stmts() :
{
  String libid;
  Declarations impdecls = new Declarations();
}
{
  (libid=import_stmt()
    {
      try {
        Declarations decls = loader.loadLibrary(libid, errorHandler);
	if (decls != null) {
	  impdecls.add(decls);
	  addKnownTypedefs(decls.typedefs());
	}
      }
      catch (CompileException ex) {
        throw new ParseException(ex.getMessage());
      }
    }  
  )*
    {
      return impdecls;
    }  
}

String import_stmt() :
{
  StringBuffer buf = new StringBuffer();
  String n;
}
{
  <IMPORT> n=name() { buf.append(n); }
  ("." n=name() {buf.append("."); buf.append(n); })* ";"
    {
      return buf.toString();
    }  
}

Declarations top_defs() :
{
  Declarations decls = new Declarations();
  DefinedFunction defun;
  List<DefinedVariable> defvars;
  Constant defconst;
  StructNode defstruct;
  UnionNode defunion;
  TypedefNode typedef;
}
{
  ( LOOKAHEAD(storage() typeref() <IDENTIFIER> "(")
    defun=defun()         { decls.addDefun(defun); }
  | LOOKAHEAD(3)
    defvars=defvars()     { decls.addDefvars(defvars); }
  | defconst=defconst()   { decls.addConstant(defconst); }
  | defstruct=defstruct() { decls.addDefstruct(defstruct); }
  | defunion=defunion()   { decls.addDefunion(defunion); }
  | typedef=typedef()     { decls.addTypedef(typedef); }
  )*
    {
      return decls;
    }  
}

DefinedFunction defun() :
{
  boolean priv;
  TypeRef ret;
  String n;
  Params ps;
  BlockNode body;
}
{
  priv=storage() ret=typeref() n=name() "(" ps=params() ")" body=block()
    {
      TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
      return new DefinedFunction(priv, new TypeNode(t), n, ps, body);
    }  
}

Params params() :
{
  Token t;
  Params params;
}
{
  LOOKAHEAD(<VOID> ")")
  t=<VOID>
    {
      return new Params(location(t), new ArrayList<Parameter>());
    }  
  | params=fixedparams() ["," "..." { params.acceptVarargs(); }]
    {
      return params;
    }  
}

Params fixedparams() :
{
  List<Parameter> params = new ArrayList<Parameter>();
  Parameter param, param1;
}
{
  param1=param() { params.add(param1); }
  (LOOKAHEAD(2) "," param=param() { params.add(param); })*
    {
      return new Params(param1.location(), params);
    }  
}

Parameter param() :
{
  TypeNode t;
  String n;
}
{
  t=type() n=name() { return new Parameter(t, n); }
}

BlockNode block() :
{
  Token t;
  List<DefinedVariable> vars;
  List<StmtNode> stmts;
}
{
  t="{" vars=defvar_list() stmts=stmts() "}"
    {
      return new BlockNode(location(t), vars, stmts);
    }
}

List<DefinedVariable> defvars() :
{
  List<DefinedVariable> defs = new ArrayList<DefinedVariable>();
  boolean priv;
  TypeNode type;
  String name;
  ExprNode init = null;
}
{
  priv=storage() type=type() name=name() ["=" init=expr()]
    {
      defs.add(new DefinedVariable(priv, type, name, init));
      init = null;
    }  
  ("," name=name() ["=" init=expr()]
    {
      defs.add(new DefinedVariable(priv, type, name, init));
      init = null;
    }  
  )* ";"
    {
      return defs;
    }  
}

boolean storage() :
{ Token t = null; }
{
  [t=<STATIC>] { return (t == null ? false : true); }
}

Constant defconst():
{
  TypeNode type;
  String name;
  ExprNode value;
}
{
  <CONST> type=type() name=name() "=" value=expr() ";"
    {
      return new Constant(type, name, value);
    }  
}

StructNode defstruct():
{
  Token t;
  String n;
  List<Slot> membs;
}
{
  t=<STRUCT> n=name() membs=member_list() ";"
    {
      return new StructNode(location(t), new StructTypeRef(n), n, membs);
    }  
}

UnionNode defunion():
{
  Token t;
  String n;
  List<Slot> membs;
}
{
  t=<UNION> n=name() membs=member_list() ";"
    {
      return new UnionNode(location(t), new UnionTypeRef(n), n, membs);
    }  
}

// TODO: test
TypedefNode typedef():
{
  Token t;
  TypeRef ref;
  Token newname;
}
{
  t=<TYPEDEF> ref=typeref() newname=<IDENTIFIER> ";"
    {
      addType(newname.image);
      return new TypedefNode(location(t), ref, newname.image);
    }  
}

String name() :
{ Token t; }
{
  t=<IDENTIFIER> { return t.image; }  
}

// TODO: test
TypeNode type() :
{ TypeRef ref; }
{
  ref=typeref() { return new TypeNode(ref); }  
}

TypeRef typeref() :
{
  TypeRef ref;
  Token t;
  ParamTypeRefs params;
}
{
  ref=typeref_base()
  ( LOOKAHEAD(2)
    "[" "]"
      {
        ref = new ArrayTypeRef(ref);
      }
  | "[" t=<INTEGER> "]"
      {
        ref = new ArrayTypeRef(ref, integerValue(t.image));
      }
  | "*"
      {
        ref = new PointerTypeRef(ref);
      }
  | "(" params=param_typerefs() ")"
      {
        ref = new FunctionTypeRef(ref, params);
      }
  )*
    {
      return ref;
    }  
}

// TODO: test
TypeRef typeref_base() :
{
  Token t, name;
}
{
  t=<VOID>    { return new VoidTypeRef(location(t)); }
  | t=<CHAR>  { return IntegerTypeRef.charRef(location(t)); }
  | t=<SHORT> { return IntegerTypeRef.shortRef(location(t)); } 
  | t=<INT>   { return IntegerTypeRef.intRef(location(t)); }
  | t=<LONG>  { return IntegerTypeRef.longRef(location(t)); }
  | LOOKAHEAD(2) t=<UNSIGNED> <CHAR>
              { return IntegerTypeRef.ucharRef(location(t)); }
  | LOOKAHEAD(2) t=<UNSIGNED> <SHORT>
              { return IntegerTypeRef.ushortRef(location(t)); }
  | LOOKAHEAD(2) t=<UNSIGNED> <INT>
              { return IntegerTypeRef.uintRef(location(t)); }
  | t=<UNSIGNED> <LONG>
              { return IntegerTypeRef.ulongRef(location(t)); }
  | t=<STRUCT> name=<IDENTIFIER>
              { return new StructTypeRef(location(t), name.image); }
  | t=<UNION> name=<IDENTIFIER>
              { return new UnionTypeRef(location(t), name.image); }
  | LOOKAHEAD({isType(getToken(1).image)}) name=<IDENTIFIER>
              { return new UserTypeRef(location(name), name.image); }
}

ParamTypeRefs param_typerefs() :
{ ParamTypeRefs params; }
{
  LOOKAHEAD(<VOID> ")")
  <VOID>
    {
      return new ParamTypeRefs(new ArrayList<TypeRef>());
    }  
  | params=fixedparam_typerefs() [ "," "..." { params.acceptVarargs(); }]
    {
      return params;
    }  
}

ParamTypeRefs fixedparam_typerefs() :
{
  List<TypeRef> refs = new ArrayList<TypeRef>();
  TypeRef ref;
}
{
  ref=typeref()                    { refs.add(ref); }
  ( LOOKAHEAD(2) "," ref=typeref() { refs.add(ref); })*
    {
      return new ParamTypeRefs(refs);
    }  
}

// TODO: test
List<DefinedVariable> defvar_list() :
{
  List<DefinedVariable> result = new ArrayList<DefinedVariable>();
  List<DefinedVariable> vars;
}
{
  (vars=defvars() { result.addAll(vars); })*
    {
      return result;
    }  
}

List<StmtNode> stmts() :
{
  List<StmtNode> ss = new ArrayList<StmtNode>();
  StmtNode s;
}
{
  (s=stmt() { if(s != null) ss.add(s); })*
    {
      return ss;
    }  
}

// TODO: test
StmtNode stmt() :
{
  StmtNode n = null;
  ExprNode e = null;
}
{
  (";"
  | LOOKAHEAD(2) n=labeled_stmt()
  | e=expr() ";" { n = new ExprStmtNode(e.location(), e); }
  | n=block()
  | n=if_stmt()
  | n=while_stmt()
  | n=dowhile_stmt()
  | n=for_stmt()
  | n=switch_stmt()
  | n=break_stmt()
  | n=continue_stmt()
  | n=goto_stmt()
  | n=return_stmt()
  )
    {
      return n;
    }
}

// TODO: test
LabelNode labeled_stmt() :
{
  Token t;
  StmtNode n;
}
{
  t=<IDENTIFIER> ":" n=stmt()
    {
      return new LabelNode(location(t), t.image, n);
    }
}

IfNode if_stmt() :
{
  Token t;
  ExprNode cond;
  StmtNode thenBody, elseBody = null;
}
{
  t=<IF> "(" cond=expr() ")" thenBody=stmt()
          [LOOKAHEAD(1) <ELSE> elseBody=stmt()]
    {
      return new IfNode(location(t), cond, thenBody, elseBody);
    }  
}

WhileNode while_stmt() :
{
  Token t;
  ExprNode cond;
  StmtNode body;
}
{
  t=<WHILE> "(" cond=expr() ")" body=stmt()
    {
      return new WhileNode(location(t), cond, body);
    }  
}

// TODO: test
DoWhileNode dowhile_stmt() :
{
  Token t;
  StmtNode body;
  ExprNode cond;
}
{
  t=<DO> body=stmt() <WHILE> "(" cond=expr() ")" ";"
    {
      return new DoWhileNode(location(t), body, cond);
    }
}

// TODO: test
ForNode for_stmt() :
{
  Token t;
  ExprNode init = null, cond = null, incr = null;
  StmtNode body;
}
{
  t=<FOR> "(" [init=expr()] ";" [cond=expr()] ";" [incr=expr()] ")" body=stmt()
    {
      return new ForNode(location(t), init, cond, incr, body);
    }
}

// TODO: implement
StmtNode switch_stmt() : {}
{
  <SWITCH> "(" expr() ")" "{" case_clauses() "}" { return null; }
}

// TODO: implement
void case_clauses() : {}
{
  (case_clause())*
  [default_clause()]
}

// TODO: implement
void case_clause() : {}
{
  cases() case_body()
}

// TODO: implement
void cases() : {}
{
  (<CASE> primary() ":")+
}

// TODO: implement
void default_clause() : {}
{
  <DEFAULT_> ":" case_body()
}

// TODO: implement
void case_body() : {}
{
  (stmt())+
}

// TODO: implement
StmtNode break_stmt() : {}
{
  <BREAK> ";" { return null; }
}

// TODO: implement
StmtNode continue_stmt() : {}
{
  <CONTINUE> ";" { return null; }
}

ReturnNode return_stmt() :
{
  Token t;
  ExprNode expr;
}
{
    LOOKAHEAD(2) t=<RETURN> ";" { return new ReturnNode(location(t), null); }
  | t=<RETURN> expr=expr() ";"  { return new ReturnNode(location(t), expr); }
}  

// TODO: implement
StmtNode goto_stmt() : {}
{
  <GOTO> <IDENTIFIER> ";" { return null; }
}

List<Slot> member_list() :
{
  List<Slot> membs = new ArrayList<Slot>();
  Slot s;
}
{
  "{" (s=slot() ";" { membs.add(s); })* "}"
    {
      return membs;
    }  
}

Slot slot() :
{
  TypeNode t;
  String n;
}
{
  t=type() n=name() { return new Slot(t, n); }
}

UndefinedFunction funcdecl():
{
  TypeRef ret;
  String n;
  Params ps;
}
{
  <EXTERN> ret=typeref() n=name() "(" ps=params() ")" ";"
    {
      TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
      return new UndefinedFunction(new TypeNode(t), n, ps);
    }
}    

UndefinedVariable vardecl():
{
  TypeNode t;
  String n;
}
{
  <EXTERN> t=type() n=name() ";"
    {
      return new UndefinedVariable(t, n);
    }
}

// TODO: test
ExprNode expr() :
{
  ExprNode lhs, rhs, expr;
  String op;
}
{
  LOOKAHEAD(term() "=")
  lhs=term() "=" rhs=expr()
    {
      return new AssignNode(lhs, rhs);
    }
  | LOOKAHEAD(term() opassign_op())
  lhs=term() op=opassign_op() rhs=expr()
    {
      return new OpAssignNode(lhs, op, rhs);
    }
  | expr=expr10()
    {
      return expr;
    }  
}

String opassign_op() : {}
{
  ( "+="  { return "+"; }
  | "-="  { return "-"; }
  | "*="  { return "*"; }
  | "/="  { return "/"; }
  | "%="  { return "%"; }
  | "&="  { return "&"; }
  | "|="  { return "|"; }
  | "^="  { return "^"; }
  | "<<=" { return "<<"; }
  | ">>=" { return ">>"; }
  )
}

ExprNode expr10() :
{ ExprNode c, t, e; }
{
  c=expr9() [ "?" t=expr() ":" e=expr10()
              { return new CondExprNode(c, t, e); }]
    {
      return c;
    }  
}

ExprNode expr9() :
{ ExprNode l, r; }
{
  l=expr8() ("||" r=expr8() { l = new LogicalOrNode(l, r); })*
    {
      return l;
    }  
}

// TODO: LogicalAnd 左結合?
ExprNode expr8() :
{ ExprNode l, r; }
{
  l=expr7() ("&&" r=expr7() { l = new LogicalAndNode(l, r); })*
    {
      return l;
    }  
}

ExprNode expr7() :
{ ExprNode l, r; }
{
  l=expr6() ( ">"  r=expr6() { l = new BinaryOpNode(l, ">",  r); }
            | "<"  r=expr6() { l = new BinaryOpNode(l, "<",  r); }
            | ">=" r=expr6() { l = new BinaryOpNode(l, ">=", r); }
            | "<=" r=expr6() { l = new BinaryOpNode(l, "<=", r); }
            | "==" r=expr6() { l = new BinaryOpNode(l, "==", r); }
            | "!=" r=expr6() { l = new BinaryOpNode(l, "!=", r); }
	    )*
    {
      return l;
    }  
}

ExprNode expr6() :
{ ExprNode l, r; }
{
  l=expr5() ("|" r=expr5() { l = new BinaryOpNode(l, "|", r); })*
    {
      return l;
    }  
}

ExprNode expr5() :
{ ExprNode l, r; }
{
  l=expr4() ("^" r=expr4() { l = new BinaryOpNode(l, "^", r); })*
    {
      return l;
    }  
}

ExprNode expr4() :
{ ExprNode l, r; }
{
  l=expr3() ("&" r=expr3() { l = new BinaryOpNode(l, "&", r); })*
    {
      return l;
    }  
}

ExprNode expr3() :
{ ExprNode l, r; }
{
  l=expr2() ( ">>" r=expr2() { l = new BinaryOpNode(l, ">>", r); }
            | "<<" r=expr2() { l = new BinaryOpNode(l, "<<", r); }
            )*
    {
      return l;
    }  
}

ExprNode expr2() :
{ ExprNode l, r; }
{
  l=expr1() ( "+" r=expr1() { l = new BinaryOpNode(l, "+", r); }
            | "-" r=expr1() { l = new BinaryOpNode(l, "-", r); }
	    )*
    {
      return l;
    }
}

ExprNode expr1() :
{ ExprNode l, r; }
{
  l=term() ( "*" r=term() { l = new BinaryOpNode(l, "*", r); }
           | "/" r=term() { l = new BinaryOpNode(l, "/", r); }
	   | "%" r=term() { l = new BinaryOpNode(l, "%", r); }
	   )*
    {
      return l;
    }  
}

ExprNode term() :
{
  TypeNode t;
  ExprNode n;
}
{
  LOOKAHEAD("(" type())
  "(" t=type() ")" n=term() { return new CastNode(t, n); }
  | n=unary()               { return n; }
}

// TODO: implement
ExprNode unary() :
{
  ExprNode n;
  TypeNode t;
}
{
    "++" n=unary() { return new PrefixOpNode("++", n); }
  | "--" n=unary() { return new PrefixOpNode("--", n); }
  | "+"  n=unary() { return new UnaryOpNode("+", n); }
  | "-"  n=unary() { return new UnaryOpNode("-", n); }
  | "!"  n=unary() { return new UnaryOpNode("!", n); }
  | "~"  n=unary() { return new UnaryOpNode("~", n); }
  | "*"  n=unary() { return new DereferenceNode(n); }
  | "&"  n=unary() { return new AddressNode(n); }
  | LOOKAHEAD(3) <SIZEOF> "(" t=type() ")"
                   {
                     return new SizeofTypeNode(t, size_t());
		   }  
  | <SIZEOF> n=unary()
                   {
		     return new SizeofExprNode(n, size_t());
		   }
  | n=postfix()    { return n; }
}

ExprNode postfix() :
{
  ExprNode expr, idx;
  String memb;
  List<ExprNode> args;
}
{
  expr=primary()
  ( "++"                { expr = new SuffixOpNode("++", expr); }
  | "--"                { expr = new SuffixOpNode("--", expr); }
  | "[" idx=expr() "]"  { expr = new ArefNode(expr, idx); }
  | "." memb=name()     { expr = new MemberNode(expr, memb); }
  | "->" memb=name()    { expr = new PtrMemberNode(expr, memb); }
  | "(" args=args() ")" { expr = new FuncallNode(expr, args); }
  )*
    {
      return expr;
    }	 
}

List<ExprNode> args() :
{
  List<ExprNode> args = new ArrayList<ExprNode>();
  ExprNode arg;
}
{
  [ arg=expr() { args.add(arg); }
  ("," arg=expr() { args.add(arg); })* ]
    {
      return args;
    }  
}

ExprNode primary() :
{
  Token t;
  ExprNode n;
}
{
    t=<INTEGER>
    {
      return integerNode(location(t), t.image);
    }  
  | t=<CHARACTER>
    {
      return new IntegerLiteralNode(location(t),
                                    IntegerTypeRef.charRef(),
				    characterCode(t.image));
    }				    
  | t=<STRING>
    {
      return new StringLiteralNode(location(t),
                               new PointerTypeRef(IntegerTypeRef.charRef()),
	                       stringValue(t.image));
    }
  | t=<IDENTIFIER>
    {
      return new VariableNode(location(t), t.image);
    }
  | "(" n=expr() ")"
    {
      return n;
    }
}
