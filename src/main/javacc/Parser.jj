options {
  DEBUG_PARSER = true;
  UNICODE_INPUT = true;
  JDK_VERSION="11";
}

PARSER_BEGIN(Parser)
package cflat.parser;

import cflat.ast.AST;
import cflat.exception.FileException;
import cflat.exception.SyntaxException;
import cflat.utils.ErrorHandler;
import java.io.*;
import java.util.*;

/**
 * parser
 */
public class Parser {

  static public AST parseFile(File file, LibraryLoader loader,
                              ErrorHandler errorHandler)
			      throws SyntaxException, FileException {
    return parseFile(file, loader, errorHandler, false);
  }

  static public AST parseFile(File file, LibraryLoader loader,
                              ErrorHandler errorHandler, boolean debug)
			      throws SyntaxException, FileException {
    return newFileParser(file, loader, errorHandler, debug).parse();
  }

  static final public String SOURCE_ENCODING = "UTF-8";
  
  static public Parser newFileParser(File file, LibraryLoader loader,
                                     ErrorHandler errorHandler, boolean debug)
				     throws FileException {
    try {
      BufferedReader r =
        new BufferedReader(
	  new InputStreamReader(new FileInputStream(file), SOURCE_ENCODING));
      return new Parser(r, file.getPath(), loader, errorHandler, debug);
    }
    catch (FileNotFoundException ex) {
      throw new FileException(ex.getMessage());
    }
    catch (UnsupportedEncodingException ex) {
      throw new Error(SOURCE_ENCODING + " is not supported??: " +
                      ex.getMessage());
    }
  }  

  public Parser(Reader s, String name, LibraryLoader loader,
                ErrorHandler errorHandler) {
    this(s, name, loader, errorHandler, false);		
  }
  
  private String sourceName;
  private LibraryLoader loader;
  private ErrorHandler errorHandler;
  private Set<String>knownTypedefs;
  
  public Parser(Reader s, String name, LibraryLoader loader,
                ErrorHandler errorHandler, boolean debug) {
    this(s);
    this.sourceName = name;
    this.loader = loader;
    this.errorHandler = errorHandler;
    this.knownTypedefs = new HashSet<String>();
    if(debug) {
      enable_tracing();
    } else {
      disable_tracing();
    }
  }

  public AST parse() throws SyntaxException {
    try {
      return compilation_unit();
    }
    catch (TokenMgrException ex) {
      throw new SyntaxException(ex.getMessage());
    }  
    catch (ParseException ex) {
      throw new SyntaxException(ex.getMessage());
    }
    catch (LookaheadSuccess err) {
      throw new SyntaxException("syntax error");
    }
  }  
		
  private boolean isType(String name) {
    // TODO:
    return false;
  }

  static public void parse(Reader reader) throws ParseException {
    new Parser(reader).compilation_unit();
  }  
}
PARSER_END(Parser)

SPECIAL_TOKEN: { <SPACES: ([" ","\t","\r","\n","\f"])+> }

SPECIAL_TOKEN: { <LINE_COMMENT: "//" (~["\n","\r"])*("\n"|"\r\n"|"\r")?> }

MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }

MORE: { <"\""> : IN_STRING }
<IN_STRING> MORE: {
    <(~["\"","\\","\n","\r"])+>
  | <"\\"(["0"-"7"]){3}>
  | <"\\"~[]>
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }

MORE: { <"'"> : IN_CHARACTER }
<IN_CHARACTER> MORE: {
    <~["'","\\","\n","\r"]> : CHARACTER_TERM
  | <"\\"(["0"-"7"]){3}>    : CHARACTER_TERM
  | <"\\"~[]>               : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT }

TOKEN: {
    <BREAK    : "break"   >
  | <CASE     : "case"    >
  | <CHAR     : "char"    >
  | <CONST    : "const"   >
  | <CONTINUE : "continue">
  | <DEFAULT_ : "default" >
  | <DO       : "do"      >
  | <ELSE     : "else"    >
  | <FOR      : "for"     >
  | <GOTO     : "goto"    >
  | <IF       : "if"      >
  | <INT      : "int"     >
  | <IMPORT   : "import"  >
  | <LONG     : "long"    >
  | <RETURN   : "return"  >
  | <SHORT    : "short"   >
  | <SIZEOF   : "sizeof"  >
  | <STATIC   : "static"  >
  | <STRUCT   : "struct"  >
  | <SWITCH   : "switch"  >
  | <TYPEDEF  : "typedef" >
  | <UNION    : "union"   >
  | <UNSIGNED : "unsigned">
  | <VOID     : "void"    >
  | <WHILE    : "while"   >
}

TOKEN: {
    <INTEGER: ["1"-"9"](["0"-"9"])*("U")?("L")?
            | "0"["x","X"](["0"-"9","a"-"f","A"-"F"])+("U")?("L")?
	    | "0"(["0"-"7"])*("U")?("L")?
            >
}

TOKEN: {
    <IDENTIFIER: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

AST compilation_unit(): {}
{
  import_stmts() top_defs() <EOF>
    {
      // TODO
      return null;
    }  
}

void import_stmts() : {}
{
  (import_stmt())*		
}

void import_stmt() : {}
{
  <IMPORT> name() ("." name())* ";"
}

void top_defs() : {}
{
  ( LOOKAHEAD(storage() typeref() <IDENTIFIER> "(")
    defun()
  | LOOKAHEAD(3)
    defvars()
  | defconst()
  | defstruct()
  | defunion()
  | typedef()
  )*
}

void defun() : {}
{
  storage() typeref() name() "(" params() ")" block()
}

void params() : {}
{
  LOOKAHEAD(<VOID> ")")
  <VOID>
  | fixedparams() ["," "..."]
}

void fixedparams() : {}
{
  param() (LOOKAHEAD(2) "," param())*
}

void param() : {}
{
  type() name()
}

void block() : {}
{
  "{" defvar_list() stmts() "}"
}

void defvars() : {}
{
  storage() type() name() ["=" expr()]
              ("," name() ["=" expr()])* ";"
}
void storage() : {}
{
  [<STATIC>]
}

void defconst(): {}
{
  <CONST> type() name() "=" expr() ";"
}

void defstruct(): {}
{
  <STRUCT> name() member_list() ";"
}

void defunion(): {}
{
  <UNION> name() member_list() ";"
}

void typedef(): {}
{
  <TYPEDEF> typeref() <IDENTIFIER> ";"
}

void name() : {}
{
  <IDENTIFIER>
}

void type() : {}
{
  typeref()
}

void typeref() : {}
{
  typeref_base()
  ( LOOKAHEAD(2) "[" "]"
  | "[" <INTEGER> "]"
  | "*"
  | "(" param_typerefs() ")"
  )*
}

void typeref_base() : {}
{
  <VOID>
  | <CHAR>
  | <SHORT>
  | <INT>
  | <LONG>
  | LOOKAHEAD(2) <UNSIGNED> <CHAR>
  | LOOKAHEAD(2) <UNSIGNED> <SHORT>
  | LOOKAHEAD(2) <UNSIGNED> <INT>
  | <UNSIGNED> <LONG>
  | <STRUCT> <IDENTIFIER>
  | <UNION> <IDENTIFIER>
  | LOOKAHEAD({isType(getToken(1).image)}) <IDENTIFIER>
}

void param_typerefs() : {}
{
  LOOKAHEAD(<VOID> ")")
  <VOID>
  | fixedparam_typerefs() [ "," "..." ]
}

void fixedparam_typerefs() : {}
{
  typeref() ( LOOKAHEAD(2) "," typeref() )*
}

void defvar_list() : {}
{
  (defvars())*
}

void stmts() : {}
{
  (stmt())*
}

void stmt() : {}
{
  (";"
  | LOOKAHEAD(2) labeled_stmt()
  | expr() ";"
  | block()
  | if_stmt()
  | while_stmt()
  | dowhile_stmt()
  | for_stmt()
  | switch_stmt()
  | break_stmt()
  | continue_stmt()
  | goto_stmt()
  | return_stmt()
  )
}

void labeled_stmt() : {}
{
  <IDENTIFIER> ":" stmt()
}

void if_stmt() : {}
{
  <IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt()]
}

void while_stmt() : {}
{
  <WHILE> "(" expr() ")" stmt()
}

void dowhile_stmt() : {}
{
  <DO> stmt() <WHILE> "(" expr() ")" ";"
}

void for_stmt() : {}
{
  <FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

void switch_stmt() : {}
{
  <SWITCH> "(" expr() ")" "{" case_clauses() "}"
}

void case_clauses() : {}
{
  (case_clause())*
  [default_clause()]
}

void case_clause() : {}
{
  cases() case_body()
}

void cases() : {}
{
  (<CASE> primary() ":")+
}

void default_clause() : {}
{
  <DEFAULT_> ":" case_body()
}

void case_body() : {}
{
  (stmt())+
}

void break_stmt() : {}
{
  <BREAK> ";"
}

void continue_stmt() : {}
{
  <CONTINUE> ";"
}

void return_stmt() : {}
{
  LOOKAHEAD(2) <RETURN> ";"
  | <RETURN> expr() ";"
}  

void goto_stmt() : {}
{
  <GOTO> <IDENTIFIER> ";"
}

void member_list() : {}
{
  "{" (slot() ";")* "}"
}

void slot() : {}
{
  type() name()
}

void expr() : {}
{
  LOOKAHEAD(term() "=")
  term() "=" expr()
  | LOOKAHEAD(term() opassign_op())
  term() opassign_op() expr()
  | expr10()
}

void opassign_op() : {}
{
  ( "+="
  | "-="
  | "*="
  | "/="
  | "%="
  | "&="
  | "|="
  | "^="
  | "<<="
  | ">>="
  )
}

void expr10() : {}
{
  expr9() [ "?" expr() ":" expr10()]
}

void expr9() : {}
{
  expr8() ("||" expr8())*
}

void expr8() : {}
{
  expr7() ("&&" expr7())*
}

void expr7() : {}
{
  expr6() ( ">" expr6()
          | "<" expr6()
          | ">=" expr6()
          | "<=" expr6()
          | "==" expr6()
          | "!=" expr6())*
}

void expr6() : {}
{
  expr5() ("|" expr5())*
}
void expr5() : {}
{
  expr4() ("^" expr4())*
}

void expr4() : {}
{
  expr3() ("&" expr3())*
}

void expr3() : {}
{
  expr2() ( ">>" expr2()
          | "<<" expr2())*
}

void expr2() : {}
{
  expr1() ( "+" expr1()
          | "-" expr1())*
}

void expr1() : {}
{
  term() ( "*" term()
         | "/" term()
	 | "%" term())* 
}

void term() : {}
{
  LOOKAHEAD("(" type()) "(" type() ")" term()
  | unary()
}

void unary() : {}
{
    "++" unary()
  | "--" unary()
  | "+" unary()
  | "-" unary()
  | "!" unary()
  | "~" unary()
  | "*" unary()
  | "&" unary()
  | LOOKAHEAD(3) <SIZEOF> "(" type() ")"
  | <SIZEOF> unary()
  | postfix()
}

void postfix() : {}
{
  primary() ( "++"
            | "--"
	    | "[" expr() "]"
	    | "." name()
	    | "->" name()
	    | "(" args() ")"
	    )*
}

void args() : {}
{
  [ expr() ("," expr())* ]
}

void primary() : {}
{
    <INTEGER>
  | <CHARACTER>
  | <STRING>
  | <IDENTIFIER>
  | "(" expr() ")"
}
